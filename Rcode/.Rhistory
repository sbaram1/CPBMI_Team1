summary(res_vif)
str(res_vif)
x3 <- x2*rnorm(n, mean = 1, sd = 1) + rnorm(n, mean = 0, sd = 1)
y2 <- 2.5*x1 + 1.3*x2 + x3 + rnorm(n, mean = 0, sd = 3)
result2 <- lm(y2 ~ x1 + x2 + x3)
summary(result2)
x3 <- x2*sample(90:110, n, replace = T) + rnorm(n, mean = 0, sd = 1)
y2 <- 2.5*x1 + 1.3*x2 + x3 + rnorm(n, mean = 0, sd = 3)
result2 <- lm(y2 ~ x1 + x2 + x3)
summary(result2)
x3 <- x2*sample(80:120, n, replace = T) + rnorm(n, mean = 0, sd = 1)
y2 <- 2.5*x1 + 1.3*x2 + x3 + rnorm(n, mean = 0, sd = 3)
result2 <- lm(y2 ~ x1 + x2 + x3)
summary(result2)
vif(result2)
res_vif <- lm(x2 ~ x1 + x3)
summary(res_vif)
r_squ <- 0.9081
1/(1-r_squ)
r_squ <- 0.9062
1/(1-r_squ)
r_squ <- 0.9081
1/(1-r_squ)
library(dplyr)
lm(x1 ~ x2 + x3) %>% summary
r_squ <- 0.004903
1/(1-r_squ)
vif(result2)
result1$terms
summary(result2)$r.squared
r_squ <- summary(result2)$r.squared
1/(1-r_squ)
result2 <- lm(y2 ~ x1 + x2 + x3)
summary(result2)
vif(result2)
vif(result1)
r_squ <- summary(res_vif)$r.squared
1/(1-r_squ)
a <- c(1, 2, 2, 3, 5, 9)
unique(a)
A1 <- c(1, 2, 3, 4)
length(A1)
A1 <- c(1, 2, 3, 4)
A2 <- c("Math", "Science", "Science", "Music", "Math")
typeof(A2)
typeof(A1)
A3 <- c(1, 2, "Math", "Music")
typeof(A3)
A3
length(A1)
2:96
rep(5, 12)
rep(5, 120)
rep(1:5, 3)
seq(0, 1, length.out = 11)
seq(0, 1, length.out = 101)
seq(1, 100, by = 5)
?seq
seq(from = 1, to = 10, length.out = 11)
seq(to = 10, from = 1, length.out = 11 )
seq(lengt = 11, fro = 1, to = 10)
?matrix
matrix(1:16, nrow = 4)
matrix(1:16, nr = 2)
?seq
seq(1, 10, length.out = 10)
?matrix
Gender <- c(1, 2, 2, 2, 1, 2, 1, 2, 1, 1)
Gender <- factor(Gender, levels = c(1, 2), labels = c("male", "female"))
Gender
Gender <- c(1, 2, 2, 2, 1, 2, 1, 2, 1, 1)
Gender
Gender <- factor(Gender, levels = c(1, 2), labels = c("male", "female"))
Gender
levels(Gender)
Gender <- relevel(Gender, ref = "female")
levels(Gender)
Mat1 <- matrix(1:16, nrow = 4)
Mat1
Mat2 <- matrix(21:36, nrow = 4, byrow = T)
Mat2
rbind(Mat1, Mat2)
cbind(Mat1, Mat2)
intake.pre <- c(5260, 5470, 5640, 6180, 6390, 6515, 6805, 7515, 7515, 8230, 8770)
intake.post <- c(3910, 4220, 3885, 5160, 5645, 4680, 5265, 5975, 6790, 6990, 7335)
intake.race <- c("w", "w", "b", "h", "h", "w", "b", "w", "w", "h", "b")
db <- data.frame(before = intake.pre,
after = intake.post,
race = intake.race)
db
summary(db)
db
library(dplyr)
filter(db, before > 7000)
filter(db, before > 7000) %>%
select(before, after)
DF1 <- db
DF1
DF1$before > 7000
DF1[DF1$before > 7000, ]
DF1[DF1$before > 7000, "race"]
DF1[DF1$before > 7000, c("before", "after")]
A1 <- c(1, 2, 3, 4)
A1[1]
A1[3]
Mat1
Mat1[2, 2]
B1 <- c(1, 2, 3, 4, NA, 6, 7, NA)
is.na(B1)
sum(is.na(B1))
B2 <- c(1, 2, 3, 4, 999, 6, 7, 999)
summary(B2)
B2[B2 == 999]
B2[B2 == 999] <- NA
B2
summary(B2)
sum(B2)
?sum
sum(B2, na.rm = T)
mean(B2)
mean(B2, na.rm = T)
DF1
DF1$before[c(3, 5)] <- NA
DF1
DF1$after[c(1, 4)] <- NA
DF1
ageGroup <- c("<20", "20 - 29", "30 - 39", "40 - 49", ">50")
Amethod <- c(7, 8, 9, 10, 11)
Bmethod <- c(9, 8, 10, 11, 12)
Cmethod <- c(10, 11, 12, 13, 14)
DF4 <- data.frame(ageGroup, Amethod, Bmethod, Cmethod)
DF4
DF4
library(tidyr)
DF4_long <-  gather(DF4, method, days, Amethod:Cmethod)
DF4_long
DF4_long
boxplot(DF4_long$days ~ DF4_long$method, col = rainbow(3))
boxplot(DF4_long$days ~ DF4_long$method, col = rainbow(3))
boxplot(DF4_long$days ~ DF4_long$method, col = rainbow(3))
n <- 5000
x1 <- sample(20:80, n)
x1 <- sample(20:80, n, replace = T)
x1
set.seed(1)
n <- 5000
x1 <- sample(20:80, n, replace = T)
x2  <- sample(50:300, n, replace = T)
x2
y1 <- 0.3*x1 + 1.5*x2 + rnorm(n, mean = 0, sd = 2)
cbind(y1, x1, x2)
cbind(y1, x1, x2) %>% head
result <- lm(y1 ~ x1 + x2)
summary(result)
library(car)
vif(result)
x3 <- x2*sample(90:110, n, replace = T)/100 + rnorm(n, 0, 2)
y2 <- 0.3*x1 + 1.5*x2 + x3 + rnorm(n, 0, 2)
result2 <- lm(y2 ~ x1 + x2 + x3)
summary(result2)
vif(result2)
summary(result2)
x3 <- x2*sample(80:120, n, replace = T)/100 + rnorm(n, 0, 2)
result2 <- lm(y2 ~ x1 + x2 + x3)
summary(result2)
str(summary(result2))
r_squ <- summary(result2)$r.squared
r_squ
1-r_squ
vifres <- lm(x2 ~ x1 + x3)
summary(vifres)
summary(vifres)$r.squared
1-summary(vifres)$r.squared
1/(1-summary(vifres)$r.squared)
vif(result2)
rnorm(10, mean = 0, sd = 1)
rnorm(10, mean = 20, sd = 10)
set.seed(1)
A <- rnorm(500, 0, 1)
plot(A)
plot(A)
N <- 1000
pvals <- replicate(N, {
control <- sample(A, 50, replace = T)
treatment <- sample(A, 50, replace = T)
t.test(control, treatment)$p.value
})
summary(pvals)
pvals[pvals < 0.05]
length(pvals[pvals < 0.05])
length(pvals[pvals < 0.05/1000])
a <- 2; b <- 3
t.test(control, treatment)
A <- rnorm(500, 0, 1)
control <- sample(A, 50, replace = T)
treatment <- sample(A, 50, replace = T)
t.test(control, treatment)
a <- t.test(control, treatment)
str(a)
a$p.value
install.packages("coin")
install.packages('vcd')
install.packages("ImPerm")
install.packages("lmPerm")
install.packages("boot")
score <- c(40, 57, 45, 55, 58, 57, 64, 55, 62, 55)
treatment <- factor(rep(c("A", "B"), each = 5))
treatment
mydata <- data.frame(treatment, score)
mydata
stripchart(score ~ treatment)
t.test(score ~ treatment, data = mydata, var.equal=T)
t.test(score ~ treatment, data = mydata, var.equal=T)
library(dplyr)
t.test(score ~ treatment, data = mydata, var.equal=T) %>% str()
score <- c(40, 57, 45, 55, 58, 57, 64, 55, 62, 65)
treatment <- factor(rep(c("A", "B"), each = 5))
mydata <- data.frame(treatment, score)
mydata
stripchart(score ~ treatment)
t.test(score ~ treatment, data = mydata, var.equal=T)$
t.test(score ~ treatment, data = mydata, var.equal=T)
t.test(score ~ treatment, data = mydata, var.equal=T)
t.test(score ~ treatment, data = mydata, var.equal=T)
res <- t.test(score ~ treatment, data = mydata, var.equal=T)
res
str(res)
res$statistic
t0 <- res$statistic
source("permtest")
source("permtest.r")
binary.v &lt;-
function(n)
binary.v <-
function(n)
binary.v <-
function(n)
{
x &lt;- 1:(2^n)
mx &lt;- max(x)
digits &lt;- floor(log2(mx))
ans &lt;- 0:(digits-1); lx &lt;- length(x)
x &lt;- matrix(rep(x,rep(digits, lx)),ncol=lx)
x &lt;- (x %/% 2^ans) %% 2
}
paired.perm.test <-
function(d, n.perm=1000, pval=FALSE)
paired.perm.test <-
function(d, n.perm=1000, pval=FALSE)
{
n &lt;- length(d)
obs &lt;- t.test(d)$statistic
if(is.null(n.perm)) { # do exact test
ind &lt;- binary.v(n)
allt &lt;- apply(ind,2,function(x,y)
t.test((2*x-1)*y)$statistic,d)
}
else { # do n.perm samples
allt &lt;- 1:n.perm
for(i in 1:n.perm)
allt[i] &lt;- t.test(d*sample(c(-1,1),n,repl=TRUE))$statistic
}
if(pval) return(mean(abs(allt) &gt;= abs(obs)))
allt
}
perm.test <-
function(x, y, n.perm=1000, var.equal=TRUE, pval=FALSE)
perm.test <-
function(x, y, n.perm=1000, var.equal=TRUE, pval=FALSE)
{
# number of data points
kx &lt;- length(x)
ky &lt;- length(y)
n &lt;- kx + ky
# observed statistic
obs &lt;- t.test(x,y, var.equal=var.equal)$statistic
# Data re-compiled
X &lt;- c(x,y)
z &lt;- rep(1:0,c(kx,ky))
if(is.null(n.perm)) { # do exact permutation test
o &lt;- binary.v(n)  # indicator of all possible samples
o &lt;- o[,apply(o,2,sum)==kx]
nc &lt;- choose(n,kx)
allt &lt;- 1:nc
for(i in 1:nc) {
xn &lt;- X[o[,i]==1]
yn &lt;- X[o[,i]==0]
allt[i] &lt;- t.test(xn,yn,var.equal=var.equal)$statistic
}
}
else { # do 1000 permutations of the data
allt &lt;- 1:n.perm
for(i in 1:n.perm) {
z &lt;- sample(z)
xn &lt;- X[z==1]
yn &lt;- X[z==0]
allt[i] &lt;- t.test(xn,yn,var.equal=var.equal)$statistic
}
}
if(pval) return(mean(abs(allt) &gt;= abs(obs)))
allt
}
library(coin)
oneway_test(score ~ treatment, data = mydata,
distribution = "exact")
library(MASS)
dim(UScrime)
UScrime$So <- factor(UScrime$So)
View(UScrime)
wilcox_test(Prob ~ So, data = UScrime, distribution = "exact")
library(multcomp)
set.seed(1234)
boxplot(response ~ trt, data = cholesterol)
oneway_test(response ~ trt, data = cholesterol,
distribution = approximate(B=9999))
?oneway_test
library(vcd)
str(Arthritis)
Arthritis$Improved <- as.factor(as.numeric(Arthritis$Improved))
str(Arthritis)
set.seed(1234)
chisq_test(Treatment ~ Improved, data = Arthritis,
distribution = approximate(B=9999))
chisq_test(Treatment ~ Improved, data = Arthritis,
distribution = "exact")
chisq.test(Treatment ~ Improved, data = Arthritis)
chisq.test(Arthritis$Treatment ~ Arthritis$Improved)
chisq_test(Treatment ~ Improved, data = Arthritis,
distribution = approximate(B=9999))
states <- as.data.frame(state.x77)
pairs(states)
head(states)
spearman_test(Illiteracy ~ Murder, data = states,
distribution = approximate(B=99999))
spearman_test(Illiteracy ~ Murder, data = states,
distribution = approximate(B=999999))
spearman_test(Illiteracy ~ Murder, data = states,
distribution = approximate(B=9999999))
wilcoxsign_test(U1 ~ U2, data = UScrime,
distribution = "exact")
library(lmPerm)
set.seed(1234)
fit <- lmp(weight ~ height, data data = women,
perm = "Prob")
library(lmPerm)
set.seed(1234)
fit <- lmp(weight ~ height, data data = women,
perm = "Prob")
fit <- lmp(weight ~ height, data = women,
perm = "Prob")
summary(fit)
fit <- lmp(Murder ~ Population + Illiteracy + Income + Frost,
data = states, perm = "Prob")
summary(fit)
set.seed(1234)
fit <- aovp(response ~ trt, data = cholesterol,
perm = "Prob")
summary(fit)
rsq <- funciton(formula, data, indices){
d <- data[indices,]
fit <- lm(formula, data = d)
return(summary(fit)$r.square)
}
rsq <- funciton(formula, data, indices){
d <- data[indices,]
fit <- lm(formula, data = d)
return(summary(fit)$r.square)
}
rsq <- function(formula, data, indices){
d <- data[indices,]
fit <- lm(formula, data = d)
return(summary(fit)$r.square)
}
result <- boot(data = mtcars,
statistics=rsq,
R = 1000,
formula = mpe~wt+disp)
library(boot)
result <- boot(data = mtcars,
statistics=rsq,
R = 1000,
formula = mpe~wt+disp)
result <- boot(data = mtcars,
statistics=rsq,
R = 1000,
formula = mpg~wt+disp)
result <- boot(data = mtcars,
statistic=rsq,
R = 1000,
formula = mpg~wt+disp)
print(result)
plot(result)
boot.ci(result, type=c("perc", "bca"))
source("http://bioconductor.org/biocLite.R")
biocLite("ggplot2")
biocLite("reshape")
library(reshape)
biocLite("DriverNet")
install.packages("class")
install.packages("mgcv")
install.packages("Matrix")
library(DriverNet)
biocLite("bsseq")
biocLite("bsseqData")
library(bsseq)
library(bsseqData)
options(repos=c(getOption("repos"), "http://ccb.nki.nl/software/discover/repos/r"))
install.packages("discover")
install.packages("cgdsr")
install.packages("cometExactTest")
source("https://bioconductor.org/biocLite.R")
biocLite("maftools")
library(discover)
library(cgdsr)
library(maftools)
library(cometExactTest)
install.packages("SNPassoc")
library(SNPassoc)
library(coin)
library(qqman)
install.packages("qqman")
library(qqman)
library(seqMeta)
install.packages("seqMeta")
install.packages("snp.plotter")
library(seqMeta)
library(snp.plotter)
fisher.test(matrix(c(12, 10, 26, 66), nrow=2))
matrix(c(12, 10, 26, 66)
fisher.test(matrix(c(12, 10, 26, 66), nrow=2))
matrix(c(12, 10, 26, 66), nrow=2)
matrix(c(12, 10, 26, 66), nrow=2, byrow = T)
fisher.test(matrix(c(12, 10, 26, 66), nrow=2, byrow = T))
fisher.test(matrix(c(6, 5, 23, 23), nrow=2))
fisher.test(matrix(c(6, 3, 5, 43), nrow=2))
chisq.test(matrix(c(6, 5, 3, 43), nrow=2))
data("SNPs")
SNPs[1:10, 1:10]
?SNPs
dim(SNPs)
head(SNPs)
str(SNPs)
datSNP <- setupSNP(SNPs, 6:40, sep="")
head(datSNP)
xtabs(~casco + snp10001, data = datSNP)
independence_test(casco ~ snp10001, data=datSNP, teststat="quad", scores = list(snp10001=c(0, 1, 2)))
pre_SNPs<-snp(SNPs$snp10005,sep="")
head(pre_SNPs)
summary(pre_SNPs)
str(pre_SNPs)
plot(pre_SNPs, col="red")
myData<-setupSNP(data=SNPs,colSNPs=6:40,sep="")
res<-tableHWE(myData)
head(res, n=10)
head(gwasResults, n=6)
manhattan(gwasResults, main = "Manhattan Plot", cex = 0.5, cex.axis = 0.8, col = c("blue4", "orange3"))
dim(gwasResults)
data(seqMetaExample)
?seqMetaExample
dim(seqMetaExample)
dim(Z1)
Z1[1:5, 1:5]
dim(Z1)
head(pheno1)
cohort1 <- prepScores(Z=Z1, y~1, SNPInfo=SNPInfo, data=pheno1)
cohort2 <- prepScores(Z=Z2, y~1, SNPInfo=SNPInfo, data=pheno2)
out <- burdenMeta(cohort1, cohort2, SNPInfo = SNPInfo, mafRange=c(0, 0.01))
out$p
which(out$p<0.05)
library(dplyr)
setwd("~/Dropbox/BIBook/CPBMI_Team1/1KGP")
igsr_race <- read.csv("igsr_samples.tsv", sep = "\t")
head(igsr_race)
library(dplyr)
setwd("~/Dropbox/BIBook/CPBMI_Team1/Rcode")
ch19_Minor_Allele_present_rm_pipe <- read.csv("../data/ch19_Minor_Allele_present_rm_pipe.csv",
stringsAsFactors = F)
VitD_gene_ch19 <- read.csv("../data/PLOSone_gene_sets.csv", stringsAsFactors = F)
VitD_gene_ch19 <- VitD_gene_ch19 %>%
filter(Chromosome.Name == 19)
VitD_gene_ch19$GRCh37.p13_start <- NA
VitD_gene_ch19$GRCh37.p13_end <- NA
tmp <- NA
for (i in 1:nrow(VitD_gene_ch19)) {
tmp <- strsplit(VitD_gene_ch19$GRCh37.p13[i], "[: -]") %>%
unlist %>% gsub(",", "", .) %>% as.numeric()
VitD_gene_ch19$GRCh37.p13_start[i] <- tmp[4]
VitD_gene_ch19$GRCh37.p13_end[i] <- tmp[5]
}
library(IRanges)
gene_range <- IRanges(start = VitD_gene_ch19$GRCh37.p13_start,
end = VitD_gene_ch19$GRCh37.p13_end)
position <- IRanges(start = ch19_Minor_Allele_present_rm_pipe$POS,
end = ch19_Minor_Allele_present_rm_pipe$POS)
hits <- findOverlaps(gene_range, position)
hits
ch19_Minor_Allele_present_rm_pipe_VitD_gene_matching <-
ch19_Minor_Allele_present_rm_pipe[subjectHits(hits),]
ch19_Minor_Allele_present_rm_pipe_VitD_gene_matching$HGNC.symbol <- VitD_gene_ch19$HGNC.symbol[queryHits(hits)]
write.csv(ch19_Minor_Allele_present_rm_pipe_VitD_gene_matching,
file = "ch19_Minor_Allele_present_rm_pipe_VitD_gene_matching", row.names = F)
library(dplyr)
setwd("~/Dropbox/BIBook/CPBMI_Team1/1KGP")
heading <- read.csv("heading.txt", sep = "\t")
View(heading)
getwd()
setwd("~/Dropbox/BIBook/CPBMI_Team1/Rcode")
db <- read.csv("../data/ch19_Minor_Allele_present_rm_pipe_VitD_gene_matching",
stringsAsFactors = F)
View(db)
db[1, 720]
db[1, 719]
